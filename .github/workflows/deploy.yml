name: Deploy to Production

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Generate code
        run: |
          pip install -r requirements.txt
          python scripts/bmad2pf.py --src ./bmad --out ./generated
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run unit tests
        run: |
          pytest tests/unit -v --cov=generated --cov-report=xml
      
      - name: Run integration tests
        run: |
          pytest tests/integration -v
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      # Railway deployment
      - name: Deploy to Railway
        if: ${{ vars.DEPLOY_TARGET == 'railway' }}
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: bmad-pocketflow
          image: ${{ needs.build-and-push.outputs.image-tag }}
      
      # Fly.io deployment
      - name: Setup Fly.io
        if: ${{ vars.DEPLOY_TARGET == 'flyio' }}
        uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Deploy to Fly.io
        if: ${{ vars.DEPLOY_TARGET == 'flyio' }}
        run: |
          flyctl deploy --image ${{ needs.build-and-push.outputs.image-tag }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      
      # Cloud Run deployment
      - name: Deploy to Cloud Run
        if: ${{ vars.DEPLOY_TARGET == 'cloudrun' }}
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: bmad-pocketflow
          image: ${{ needs.build-and-push.outputs.image-tag }}
          region: us-central1
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      
      - name: Verify deployment
        run: |
          sleep 30  # Wait for deployment
          curl -f ${{ vars.DEPLOY_URL }}/health || exit 1